name: Deploy
on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - "README.md"

jobs:
  buildAndDeploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          # Run pytest if tests directory exists
          if [ -d "tests" ]; then pytest; else echo "No tests directory found, skipping tests"; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: package-version
        run: |
          # Install toml parser
          pip install tomli
          # Extract version from pyproject.toml
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: >-
            ${{ 
              github.ref == 'refs/heads/main' && format('gravitycloud/matter-ai-mcp:latest,gravitycloud/matter-ai-mcp:{0}', steps.package-version.outputs.VERSION) ||
              github.ref == 'refs/heads/develop' && 'gravitycloud/matter-ai-mcp:dev' ||
              format('gravitycloud/matter-ai-mcp:{0}', github.ref_name)
            }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send Slack Notification
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "âœ… Successfully deployed ${{ github.repository }} to Docker Hub\nBranch: ${{ github.ref_name }}\nTags: ${{ 
                github.ref == 'refs/heads/main' && format('latest, {0}', steps.package-version.outputs.VERSION) ||
                github.ref == 'refs/heads/develop' && 'dev' ||
                github.ref_name
              }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
